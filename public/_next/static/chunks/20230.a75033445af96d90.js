"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[20230],{20230:function(e,t,o){o.d(t,{uploadBatchBrowser:function(){return a}});var r=o(88615),s=o(99910);async function a(e,t,o,a){return new Promise((l,d)=>{let n=new XMLHttpRequest,i=setTimeout(()=>{n.abort(),d(Error("Request to upload timed out! No upload progress received in 30s"))},3e4);n.upload.addEventListener("loadstart",()=>{console.log(`[${Date.now()}] [IPFS] Started`)}),n.upload.addEventListener("progress",e=>{console.log(`[IPFS] Progress Event ${e.loaded}/${e.total}`),clearTimeout(i),e.loaded<e.total?i=setTimeout(()=>{n.abort(),d(Error("Request to upload timed out! No upload progress received in 30s"))},3e4):console.log(`[${Date.now()}] [IPFS] Uploaded files. Waiting for response.`)}),n.addEventListener("load",()=>{if(console.log(`[${Date.now()}] [IPFS] Load`),clearTimeout(i),n.status>=200&&n.status<300){let e;try{e=JSON.parse(n.responseText)}catch(e){return d(Error("Failed to parse JSON from upload response"))}let t=e.IpfsHash;if(!t)throw Error("Failed to get IPFS hash from upload response");return a?.uploadWithoutDirectory?l([`ipfs://${t}`]):l(o.map(e=>`ipfs://${t}/${e}`))}return d(Error(`Upload failed with status ${n.status} - ${n.responseText}`))}),n.addEventListener("error",()=>(console.log("[IPFS] Load"),clearTimeout(i),0!==n.readyState&&4!==n.readyState||0===n.status)?d(Error("Upload failed due to a network error.")):d(Error("Unknown upload error occured"))),n.open("POST",`https://${(0,r.gc)().storage}/ipfs/upload`),e.secretKey?n.setRequestHeader("x-secret-key",e.secretKey):e.clientId&&n.setRequestHeader("x-client-id",e.clientId),(0,s.$r)().forEach(([e,t])=>{n.setRequestHeader(e,t)}),"undefined"!=typeof globalThis&&"TW_AUTH_TOKEN"in globalThis&&"string"==typeof globalThis.TW_AUTH_TOKEN&&n.setRequestHeader("authorization",`Bearer ${globalThis.TW_AUTH_TOKEN}`),"undefined"!=typeof globalThis&&"TW_CLI_AUTH_TOKEN"in globalThis&&"string"==typeof globalThis.TW_CLI_AUTH_TOKEN&&(n.setRequestHeader("authorization",`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`),n.setRequestHeader("x-authorize-wallet","true")),n.send(t)})}}}]);